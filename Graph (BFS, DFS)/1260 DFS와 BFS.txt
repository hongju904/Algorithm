from collections import deque

N, M, V = map(int, input().split())
# 정점의 개수 N, 간선의 개수 M, 시작지점 V

graph = [[0]*(N+1) for i in range(N+1)]

for i in range(M):
    start, end = map(int, input().split())
    graph[start][end] = graph[end][start] = 1
    # 둘이 연결되어 있다는 의미

def bfs(start):
    Q = deque()
    Q.append(start)

    discoverd = [start] # 이미 지나온 길

    while Q:
        v = Q.popleft()
        print(v, end=' ')

        for w in range(N+1):
            if (graph[v][w] == 1) and (w not in discoverd): # 연결되고, 가지않은 지점
                discoverd.append(w)
                Q.append(w)

def dfs(start, discoverd=[]):
    discoverd.append(start)
    print(start, end=' ')

    for w in range(N+1):
        if graph[start][w] == 1 and (w not in discoverd):
            dfs(w, discoverd)

dfs(V)
print("")
bfs(V)